// Code generated by MockGen. DO NOT EDIT.
// Source: application.go
//
// Generated by this command:
//
//	mockgen -package=applicationtest -source=application.go -destination=applicationtest/application.go .
//

// Package applicationtest is a generated GoMock package.
package applicationtest

import (
	context "context"
	reflect "reflect"

	openapi "github.com/ardibello/estimate/pkg/gen/openapi"
	gomock "go.uber.org/mock/gomock"
)

// MockEstimatesApp is a mock of EstimatesApp interface.
type MockEstimatesApp struct {
	ctrl     *gomock.Controller
	recorder *MockEstimatesAppMockRecorder
	isgomock struct{}
}

// MockEstimatesAppMockRecorder is the mock recorder for MockEstimatesApp.
type MockEstimatesAppMockRecorder struct {
	mock *MockEstimatesApp
}

// NewMockEstimatesApp creates a new mock instance.
func NewMockEstimatesApp(ctrl *gomock.Controller) *MockEstimatesApp {
	mock := &MockEstimatesApp{ctrl: ctrl}
	mock.recorder = &MockEstimatesAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstimatesApp) EXPECT() *MockEstimatesAppMockRecorder {
	return m.recorder
}

// ProcessNewIssue mocks base method.
func (m *MockEstimatesApp) ProcessNewIssue(ctx context.Context, newIssue *openapi.PostIssueRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNewIssue", ctx, newIssue)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessNewIssue indicates an expected call of ProcessNewIssue.
func (mr *MockEstimatesAppMockRecorder) ProcessNewIssue(ctx, newIssue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNewIssue", reflect.TypeOf((*MockEstimatesApp)(nil).ProcessNewIssue), ctx, newIssue)
}
