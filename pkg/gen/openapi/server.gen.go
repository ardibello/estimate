// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for PostIssueRequestAction.
const (
	Opened PostIssueRequestAction = "opened"
)

// Detail defines model for Detail.
type Detail struct {
	// Field The specific field related to the error
	Field string `json:"field"`

	// Message Human-readable explanation of the field error
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Details List of detailed error objects for granular issues
	Details *[]Detail `json:"details,omitempty"`

	// Message Human-readable summary of the error
	Message string `json:"message"`

	// Status Status code for categorization, e.g., 'INVALID_ARGUMENT'
	Status string `json:"status"`
}

// Issue defines model for Issue.
type Issue struct {
	Body   string `json:"body"`
	Number int    `json:"number"`
}

// PostIssueRequest defines model for PostIssueRequest.
type PostIssueRequest struct {
	Action     PostIssueRequestAction `json:"action"`
	Issue      Issue                  `json:"issue"`
	Repository Repository             `json:"repository"`
}

// PostIssueRequestAction defines model for PostIssueRequest.Action.
type PostIssueRequestAction string

// PostIssueResponse Post issue response
type PostIssueResponse = map[string]interface{}

// Repository defines model for Repository.
type Repository struct {
	FullName string `json:"full_name"`
}

// PostIssuesJSONRequestBody defines body for PostIssues for application/json ContentType.
type PostIssuesJSONRequestBody = PostIssueRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// process a new/created issue
	// (POST /issues)
	PostIssues(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostIssues converts echo context to params.
func (w *ServerInterfaceWrapper) PostIssues(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostIssues(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/issues", wrapper.PostIssues)

}

type PostIssuesRequestObject struct {
	Body *PostIssuesJSONRequestBody
}

type PostIssuesResponseObject interface {
	VisitPostIssuesResponse(w http.ResponseWriter) error
}

type PostIssues200JSONResponse PostIssueResponse

func (response PostIssues200JSONResponse) VisitPostIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIssues400JSONResponse ErrorResponse

func (response PostIssues400JSONResponse) VisitPostIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// process a new/created issue
	// (POST /issues)
	PostIssues(ctx context.Context, request PostIssuesRequestObject) (PostIssuesResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostIssues operation middleware
func (sh *strictHandler) PostIssues(ctx echo.Context) error {
	var request PostIssuesRequestObject

	var body PostIssuesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostIssues(ctx.Request().Context(), request.(PostIssuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIssues")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostIssuesResponseObject); ok {
		return validResponse.VisitPostIssuesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVX2/TMBD/KpZB2ktoy5+nvA1tgkpjmrrCC0KTm1xaT4nt3V02SpXvjmwnzdpkVEjw",
	"VKs+/+735+zsZGYrZw0YJpnuJGUbqFRYXgArXfqVQ+sAWUP4v9BQ5n6RA2WoHWtrZCqXGxDkINOFzkSo",
	"EQilYsgFW8EbEIBoUSaStw5kKolRm7VsElkBkVrDEPNzXSnzBkHlalWCgJ+uVEb5TWGLgBkbvYDcJBLh",
	"odYIuUy/t8T7dj/2B+zqHjL2VC490gLIWUMw1J7ZfIzmcnkjiBXXJEJFIguLlWKZSm24J6YNwxrQN8qD",
	"uzQEu9LEXl0sgFaciBRJFBbFGpWpS4VCE9VAMpGaoQpYrxEKmcpX0z7WaZvptA202dNRiGr7NwFQXVUK",
	"t535LwYavRjC3fYeBSGZYlhb1L9CpomAyXqSiLP59bfzq/nF3fni09cvl9fLs5PRtq53OvYMxiKee9OG",
	"0a5svvW/AzGmrlaAz7b2KR6RCAj7+rHWN5Y4tF/AQw3EQxYqi1btJJi68qjWgYH8GVzPTHdK/pR6lBuo",
	"OkuaLW5PHVn0lccaW35d7wPUE4r7O3U4FL4kTrLArmgEaXFA/+hJqsvyzqgKRgI8fgT2pUO6vlabwgYU",
	"zaXfuyTWlWIgcX4zF7eAj+BH/hGQIv23k9lk5gn6oJTTMpXvw1+JdIo3gd+0vaieuI2xe/ph6ud568G8",
	"u8wYh+NjO5CZNQwmHFLOlToLx6b3FOckhnYq0sHkBbEjQSgj+mg72xhrCD7GeIKQd7PZ/2DXDsAIPQNP",
	"x2PSJPLDP6Rx+PiPUFgp/1HrDExk+x7K1M9jBkRCCQNP0wwhfPiik03TNL8DAAD///4py9VoBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
